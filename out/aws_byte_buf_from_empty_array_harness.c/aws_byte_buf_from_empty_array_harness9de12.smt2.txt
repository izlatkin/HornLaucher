(set-info :original "../out/aws_byte_buf_from_empty_array_harness.c/aws_byte_buf_from_empty_array_harness9de12.bc.txt")
(set-info :authors "SeaHorn v.10.0.0-rc0")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry ())
(declare-rel main@verifier.error.split ())
(declare-var main@%_16_0 Int )
(declare-var main@%_17_0 Int )
(declare-var main@%_18_0 Bool )
(declare-var main@%_12_0 Int )
(declare-var main@%_13_0 Int )
(declare-var main@%_14_0 Bool )
(declare-var main@%_8_0 Int )
(declare-var main@%_9_0 Int )
(declare-var main@%_10_0 Bool )
(declare-var main@%_1_0 Bool )
(declare-var main@%malloc_0 Int )
(declare-var main@%_5_0 Int )
(declare-var main@%_6_0 Bool )
(declare-var main@entry_0 Bool )
(declare-var main@%sm_0 (Array Int Int) )
(declare-var main@%_0_0 Int )
(declare-var main@%_2_0 Int )
(declare-var main@_7_0 Bool )
(declare-var main@_11_0 Bool )
(declare-var main@_15_0 Bool )
(declare-var main@verifier.error_0 Bool )
(declare-var |tuple(main@_11_0, main@verifier.error_0)| Bool )
(declare-var |tuple(main@_7_0, main@verifier.error_0)| Bool )
(declare-var |tuple(main@entry_0, main@verifier.error_0)| Bool )
(declare-var main@verifier.error.split_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule main@entry)
(rule (let ((a!1 (= main@%_8_0 (+ (+ main@%_0_0 (* 0 16)) 0)))
      (a!2 (= main@%_12_0 (+ (+ main@%_0_0 (* 0 16)) 8)))
      (a!3 (= main@%_16_0 (+ (+ main@%_0_0 (* 0 16)) 12))))
(let ((a!4 (and main@entry
                true
                (> main@%_0_0 0)
                (not main@%_1_0)
                (> main@%malloc_0 0)
                true
                (= main@%_5_0 main@%_0_0)
                (=> main@_7_0 (and main@_7_0 main@entry_0))
                (=> (and main@_7_0 main@entry_0) main@%_6_0)
                (=> main@_7_0 a!1)
                (=> main@_7_0 (or (<= main@%_0_0 0) (> main@%_8_0 0)))
                (=> main@_7_0 (= main@%_9_0 (select main@%sm_0 main@%_8_0)))
                (=> main@_7_0 (= main@%_10_0 (= main@%_9_0 0)))
                (=> main@_11_0 (and main@_11_0 main@_7_0))
                (=> (and main@_11_0 main@_7_0) main@%_10_0)
                (=> main@_11_0 a!2)
                (=> main@_11_0 (or (<= main@%_0_0 0) (> main@%_12_0 0)))
                (=> main@_11_0 (> main@%_0_0 0))
                (=> main@_11_0 (= main@%_13_0 (select main@%sm_0 main@%_12_0)))
                (=> main@_11_0 (= main@%_14_0 (= main@%_13_0 main@%_2_0)))
                (=> main@_15_0 (and main@_15_0 main@_11_0))
                (=> (and main@_15_0 main@_11_0) main@%_14_0)
                (=> main@_15_0 a!3)
                (=> main@_15_0 (or (<= main@%_0_0 0) (> main@%_16_0 0)))
                (=> main@_15_0 (> main@%_0_0 0))
                (=> main@_15_0 (= main@%_17_0 (select main@%sm_0 main@%_16_0)))
                (=> main@_15_0 (= main@%_18_0 (= main@%_17_0 0)))
                (=> main@_15_0 (not main@%_18_0))
                (=> |tuple(main@_11_0, main@verifier.error_0)| main@_11_0)
                (=> |tuple(main@_7_0, main@verifier.error_0)| main@_7_0)
                (=> |tuple(main@entry_0, main@verifier.error_0)| main@entry_0)
                (=> main@verifier.error_0
                    (or |tuple(main@_11_0, main@verifier.error_0)|
                        |tuple(main@_7_0, main@verifier.error_0)|
                        |tuple(main@entry_0, main@verifier.error_0)|
                        (and main@verifier.error_0 main@_15_0)))
                (=> |tuple(main@_11_0, main@verifier.error_0)|
                    (not main@%_14_0))
                (=> |tuple(main@_7_0, main@verifier.error_0)| (not main@%_10_0))
                (=> |tuple(main@entry_0, main@verifier.error_0)|
                    (not main@%_6_0))
                (=> main@verifier.error.split_0
                    (and main@verifier.error.split_0 main@verifier.error_0))
                main@verifier.error.split_0)))
  (=> a!4 main@verifier.error.split))))
(query main@verifier.error.split)

