(set-info :original "../out2/aws_is_power_of_two_harness.c/aws_is_power_of_two_harnessdc618.bc.txt")
(set-info :authors "SeaHorn v.10.0.0-rc0")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel aws_is_power_of_two_harness@_tail ())
(declare-rel aws_is_power_of_two_harness@.split ())
(declare-rel aws_is_power_of_two_harness (Bool Bool Bool ))
(declare-rel aws_is_power_of_two@_tail ())
(declare-rel aws_is_power_of_two@.split ())
(declare-rel aws_is_power_of_two (Bool Bool Bool ))
(declare-rel main@_tail ())
(declare-rel main@.split ())
(declare-var aws_is_power_of_two_harness@_tail_0 Bool )
(declare-var aws_is_power_of_two_harness@.split_0 Bool )
(declare-var aws_is_power_of_two@_tail_0 Bool )
(declare-var aws_is_power_of_two@.split_0 Bool )
(declare-var main@_tail_0 Bool )
(declare-var main@.split_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (aws_is_power_of_two_harness true true true))
(rule (aws_is_power_of_two_harness false true true))
(rule (aws_is_power_of_two_harness false false false))
(rule aws_is_power_of_two_harness@_tail)
(rule (=> (and aws_is_power_of_two_harness@_tail
         true
         (=> aws_is_power_of_two_harness@.split_0
             (and aws_is_power_of_two_harness@.split_0
                  aws_is_power_of_two_harness@_tail_0))
         aws_is_power_of_two_harness@.split_0)
    aws_is_power_of_two_harness@.split))
(rule (=> aws_is_power_of_two_harness@.split
    (aws_is_power_of_two_harness true false false)))
(rule (aws_is_power_of_two true true true))
(rule (aws_is_power_of_two false true true))
(rule (aws_is_power_of_two false false false))
(rule aws_is_power_of_two@_tail)
(rule (=> (and aws_is_power_of_two@_tail
         true
         (=> aws_is_power_of_two@.split_0
             (and aws_is_power_of_two@.split_0 aws_is_power_of_two@_tail_0))
         aws_is_power_of_two@.split_0)
    aws_is_power_of_two@.split))
(rule (=> aws_is_power_of_two@.split (aws_is_power_of_two true false false)))
(rule main@_tail)
(rule (=> (and main@_tail
         true
         (aws_is_power_of_two_harness true false false)
         (aws_is_power_of_two true false false)
         (=> main@.split_0 (and main@.split_0 main@_tail_0))
         main@.split_0)
    main@.split))
(query main@.split)

